{
    "name": "RetryTimeout",
    "title": "Retry and Timeout",
    "description": "Learn how to use the MicroProfile Retry and Timeout policies.",
    "duration": "20 minutes",
    "audience": "developer",
    "repo": "https://github.com/OpenLiberty/draft-iguide-retry-timeout",
    "steps": [
        {
            "name": "Intro",
            "title": "What you'll learn",
            "guide_duration" : "20 minutes",
            "description": [
                "Explore how to use MicroProfile Retry and Timeout policies to make your microservice more fault-tolerant.",
                "You'll..."
            ],
            "sections" : [
                {
                    "name": "backgroundConcepts",
                    "title": "Background concepts",
                    "description": [
                        "<b>Transient failures:</b> A brief failure that occurs at irregular an unpredictable times."
                    ]
                }
            ]
        },
        {
            "name": "BankScenario",
            "title": "Example: bank scenario",
            "description": [
                "Imagine that you're developing an online transaction history microservice for a bank to allow clients to check their transaction history. When a customer tries to view their transaction history, occasionally an unforeseen problem may prevent the data from loading and result in a needlessly long or indefinite page load."
            ],
            "sections": [
                {
                    "name": "TransactionHistory",
                    "title": "Request transaction history",
                    "description": [
                        "Begin by requesting an online transaction history."
                    ],
                    "instruction": [
                        "Enter the following URL into the browser that follows, or click <action title='URL' onclick=\"retryTimeoutCallback.populateURL(event, 'TransactionHistory')\"><b>https://global-ebank.openliberty.io/transactions</b></action> and then press <action title='Enter' onclick=\"retryTimeoutCallback.clickTransaction(event, 'TransactionHistory', 1)\"><b>Enter</b></action> to retrieve a transaction history.",
                        "Click <action title='Refresh' onclick=\"retryTimeoutCallback.clickTransaction(event, 'TransactionHistory', 2)\"><b>Refresh</b></action> in the browser to see the page loads indefinitely unable to retrieve the transaction history."
                    ],
                    "content":[
                        {
                            "displayType":"webBrowser",
                            "url": "",
                            "browserContent": "",                          
                            "callback": "(function test(webBrowser) {retryTimeoutCallback.listenToBrowserForTransactionHistory(webBrowser); })"
                        }
                    ]
                }
            ]
        },
        {
            "name": "AddLibertyMPFaultTolerance",
            "title": "Enabling MicroProfile Fault Tolerance",
            "description": [
                "Microprofile Fault Tolerance allows microservices to handle unavailable services. It uses different policies to guide the execution and result of some logic. The MicroProfile Fault Tolerance 1.0 feature provides an environment to support resilient microservices through patterns that include retry and timeout. Enable the MicroProfile Fault Tolerance 1.0 feature in the <code>server.xml</code> file of the Liberty server."
            ],
            "instruction": [
                "Add the following element declaration inside the featureManager element of the <code>server.xml</code> file, or click <action title='Enable MicroProfile Fault Tolerance' onclick=\"retryTimeoutCallback.addMicroProfileFaultToleranceFeatureButton(event)\"><b>&lt;feature>mpFaultTolerance-1.0&lt;/feature&gt;</b></action>. Then, click <action title='Save' onclick=\"retryTimeoutCallback.saveServerXMLButton(event)\"><b>Save</b></action> on the editor menu pane."
            ],
            "content": [
                {
                    "displayType": "tabbedEditor",
                    "editorList": [
                        {
                            "displayType": "fileEditor",
                            "fileName": "server.xml",
                            "editorHeight": "300px",
                            "preload": [
                                "<?xml version=\"1.0\"?>",
                                "<server description=\"Sample Liberty server\">",
                                "   <featureManager>",
                                "      <feature>cdi-1.2</feature>",
                                "   </featureManager>",
                                "   <httpEndpoint host=\"*\" id=\"defaultHttpEndpoint\" httpsPort=\"${default.https.port}\" httpPort=\"{default.http.port}\"/>",
                                "</server>"
                            ],
                            "save": true,
                            "readonly": [
                                {
                                    "from": "1",
                                    "to": "3"
                                },
                                {
                                    "from": "5",
                                    "to": "7"
                                }
                            ],
                            "callback": "(function test(editor) {retryTimeoutCallback.listenToEditorForFeatureInServerXML(editor); })"
                        }
                    ]
                }
            ]
        },
        {
            "name": "TimeoutAnnotation",
            "title": "Adding the @Timeout annotation",
            "description": [
                "Now that youâ€™ve seen the page loads indefinitely when there is some problem on the server end, let's apply a Timeout policy to limit the time the request is made to a transaction history and to prevent the page from loading for a long time.",
                "The <code>@Timeout</code> annotation takes an integer value that specifies the time allowed for the request to finish. The value must be greater than or equal to <code>0</code>. <code>0</code> means no timeout configured. If the value is not specified, the default is <code>1000</code> milliseconds.",
                "With a Timeout policy, the microservice fails with a <code>TimeoutException</code> when the set amount of time passes after the request is made.",
                "After you modify your <code>server.xml</code> file to <a href='#enabling-microprofile-fault-tolerance'> include the Fault Tolerance feature</a>, add a Timeout policy to the transaction history microservice."
            ],
            "instruction": [
                "Add the <code>@Timeout</code> annotation with a value of <code>2000</code> on line 9, before the <code>showTransactions</code> method, or click <action title='Add @Timeout' onclick=\"retryTimeoutCallback.addTimeoutButton(event, 'TimeoutAnnotation')\">@Timeout(2000)</action>. This annotation limits the allowed time for the transaction history request to 2000 milliseconds before a <code>TimeoutException</code> occurs. Then, click <action title='Run' onclick=\"retryTimeoutCallback.saveButtonEditor(event, 'TimeoutAnnotation')\"><b>Run</b></action> on the editor menu pane."
            ],
            "content": [
                {
                    "displayType": "tabbedEditor",
                    "editorList": [
                        {
                            "displayType": "fileEditor",
                            "fileName": "BankService.java",
                            "editorHeight": "400px",
                            "preload": [
                                "package io.openliberty.guides.retrytimeout.global.eBank.microservices;",
                                "import javax.enterprise.context.ApplicationScoped;",
                                "import javax.inject.Inject;",
                                "import org.eclipse.microprofile.faulttolerance.Timeout;",
                                "",
                                "@ApplicationScoped",
                                "public class BankService {",
                                "    @Inject private BankService bankService;",
                                "",
                                "    public Service showTransactions() throws Exception {",
                                "        Service transactions = new Transactions();",
                                "        transactions.getTransactions();",
                                "        return transactions;",
                                "    }",
                                "}"
                            ],
                            "readonly": [
                                {
                                    "from": "1",
                                    "to": "8"
                                },
                                {
                                    "from": "10",
                                    "to": "15"
                                }
                            ],
                            "save": false,
                            "callback": "(function test(tabbedEditor) {retryTimeoutCallback.listenToEditorForTimeoutAnnotation(tabbedEditor); })"
                        }
                    ]
                },
                {
                    "displayType":"webBrowser",
                    "url": "",
                    "browserContent": "",
                    "enableRefreshButton": "false",
                    "callback": "(function test(webBrowser) {retryTimeoutCallback.listenToBrowserForTimeoutAnnotation(webBrowser); })"
                }
            ]
        },
        {
            "name": "AddRetryOnRetry",
            "title": "Adding the @Retry annotation",
            "description": [
                "A Retry policy helps an application recover from transient failures, like a temporary network glitch. The MicroProfile <code>@Retry</code> annotation defines when to re-attempt an operation that has failed. The policy parameters include options that identify how many retry attempts should be allowed, how long to continue to retry an operation, or how to set a retry or abort condition based on a specific exception.",
                "A request to a service may fail for many different reasons. The default Retry policy initiates a retry for every <code>Throwable</code>.  However, you can base a Retry policy on a specific exception using the <code>retryOn</code> parameter.",
                "<ul><li><b>retryOn:</b> Specifies an exception class that triggers a retry. You can identify more than one exception as an array of values.  For example,<br><span style='margin-left: 10px;'><code>@Retry(retryOn={RuntimeException.class, TimeoutException.class})</code>.</span><br>The default is <code>java.lang.Exception.class</code>.",
                "</ul>",
                "After modifying the <code>server.xml</code> file to <a href='#enabling-microprofile-fault-tolerance'> include the Fault Tolerance feature</a>, we added a Timeout policy to our sample application which will cause the transaction history microservice to fail with a <code>TimeoutException</code> if the request does not complete within 2000 milliseconds.  Now, let's add a Retry policy to the code to retry the request to the transaction history microservice when a Timeout condition occurs."
            ],
            "instruction": [
                "Add the <code>@Retry</code> annotation on line 12, before the showTransactions method, to retry the service request only when a <code>TimeoutException</code> occurs, or click<br> <action title='Add @Retry with the retryOn parameter'>@Retry(retryOn=TimeoutException.class)</action>.<br> Then, click <action title='Run'><b>Run</b></action> on the editor menu pane."
            ],
            "content": [
                {
                    "displayType": "tabbedEditor",
                    "editorList": [
                        {
                            "displayType": "tabbedEditor",
                            "fileName": "BankService.java",
                            "preload": [
                                "package io.openliberty.guides.retrytimeout.global.eBank.microservices;",
                                "",
                                "import javax.enterprise.context.ApplicationScoped;",
                                "import java.time.temporal.ChronoUnit;",
                                "",
                                "import org.eclipse.microprofile.faulttolerance.Retry;",
                                "import org.eclipse.microprofile.faulttolerance.Timeout;",
                                "import org.eclipse.microprofile.faulttolerance.exceptions.TimeoutException;",
                                "",
                                "@ApplicationScoped",
                                "public class BankService {",
                                "",
                                "    @Timeout(2000)",
                                "    public Service showTransactions() throws Exception {",
                                "       Service transactions = new Transactions();",
                                "       transactions.getTransactions();",
                                "       return transactions;",
                                "   }", 
                                "}"
                            ],
                            "readonly": [
                                {
                                    "from": "1",
                                    "to": "11"
                                },
                                {
                                    "from": "13",
                                    "to": "19"
                                }
                            ],
                            "editorHeight": "450px",
                            "save": false 
                        }    
                    ]
                },
                {
                    "displayType": "pod"
                }
            ]
        },
        {
            "name": "AddLimitsRetry",
            "title": "Adding retry limits",
            "TOCIndent": 1,
            "description": [
                "Of course, you will want to set limits on the number of retry attempts. Otherwise, a busy service may become overloaded with retry requests tying up resources and taking even longer to recover from its failing condition.  The <code>@Retry</code> annotation has parameters that limit the number of retry attempts and that limit the amount of time a service can spend retrying.",
                "<ul><li><b>maxRetries:</b> The maximum number of retry requests. A value of <code>-1</code> indicates to continue retrying forever. The default is <code>3</code> requests.",
                "<li><b>maxDuration:</b> The maximum amount of time to perform all retries. Once the duration is reached, no more retry attempts should be initiated.  The default is <code>180000</code> units, as defined by the <code>durationUnit</code> parameter.",
                "<li><b>durationUnit:</b> The unit of time for the <code>maxDuration</code> parameter as described by <code>java.time.temporal.ChronoUnit</code>. The default is <code>ChronoUnit.MILLIS</code> for milliseconds.<p style='margin-top: inherit;'>The <code>java.time.temporal.ChronoUnit</code> class defines a standard set of date period units, including <code>NANOS, MICROS, MILLIS, SECONDS, MINUTES,</code> and <code>HOURS</code>.",
                "</ul>"
            ],
            "instruction": [
                "Update the <code>@Retry</code> annotation on line 13 to limit the number of retry attempts to 10 and the retry duration to 4 seconds, or click<br> <action title='Add @Retry with maxRetries and maxDuration'>@Retry(retryOn=TimeoutException.class,\n       maxRetries=10,\n       maxDuration=4,\n       durationUnit=ChronoUnit.SECONDS)</action>.<br>This Retry policy initiates a retry request for each <code>TimeoutException</code> that occurs, but limits retry attempts to no more than 10 retries. The operation aborts if the total duration of all retries lasts more than 4 seconds.<br> Then, click <action title='Run'><b>Run</b></action> on the editor menu pane."
            ],
            "content": [
                {
                    "displayType": "tabbedEditor",
                    "editorList": [
                        {
                            "displayType": "tabbedEditor",
                            "fileName": "BankService.java",
                            "preload": [
                                "package io.openliberty.guides.retrytimeout.global.eBank.microservices;",
                                "",
                                "import javax.enterprise.context.ApplicationScoped;",
                                "import java.time.temporal.ChronoUnit;",
                                "",
                                "import org.eclipse.microprofile.faulttolerance.Retry;",
                                "import org.eclipse.microprofile.faulttolerance.Timeout;",
                                "import org.eclipse.microprofile.faulttolerance.exceptions.TimeoutException;",
                                "",
                                "@ApplicationScoped",
                                "public class BankService {",
                                "",
                                "    @Retry(retryOn=TimeoutException.class)",
                                "    @Timeout(2000)",
                                "    public Service showTransactions() throws Exception {",
                                "       Service transactions = new Transactions();",
                                "       transactions.getTransactions();",
                                "       return transactions;",
                                "   }", 
                                "}"
                            ],
                            "readonly": [
                                {
                                    "from": "1",
                                    "to": "12"
                                },
                                {
                                    "from": "14",
                                    "to": "20"
                                }
                            ],
                            "editorHeight": "468px",
                            "save": false 
                        }    
                    ]
                },
                {
                    "displayType": "pod"
                }
            ]
        },
        {
            "name": "AddDelayRetry",
            "title": "Configuring a delay",
            "TOCIndent": 1,
            "description": [
                "Sometimes an application should wait before retrying a request to a service to decrease the chance that a previous failure reoccurs.  For example, to allow a sudden spike in requests to lessen or to allow connectivity issues to be resolved.  In this case, you can define a delay in the Retry policy. ",
                "<ul><li><b>delay:</b> The amount of time to wait between each retry.  The value must be greater than or equal to <code>0</code> and be less than the value for <a href='#adding-retry-limits'><b>maxDuration</b></a>.  The default is <code>0</code>.",
                "<li><b>delayUnit:</b> The unit of time for the <code>delay</code> parameter as described by <code>java.time.temporal.ChronoUnit</code>.  The default is ChronoUnit.MILLIS. <p style='margin-top: inherit;'>The <code>java.time.temporal.ChronoUnit</code> class defines a standard set of date period units, including <code>NANOS, MICROS, MILLIS, SECONDS, MINUTES,</code> and <code>HOURS</code>.",
                "<ul>"
            ],
            "instruction": [
                "Update the <code>@Retry</code> annotation on lines 13-16 to include a delay of <code>400ms</code>, or click<br><action title='Add @Retry with delay'>@Retry(retryOn=TimeoutException.class,\n       maxRetries=10,\n       maxDuration=4,\n       durationUnit=ChronoUnit.SECONDS,\n       delay=400, delayUnit=ChronoUnit.MILLIS)</action>.<br> This indicates there should be a delay of 400ms following each timeout failure from the View Transaction microservice before retrying another request, but no more than 10 retries should occur and retry attempts should stop after 4 seconds.<br> Then, click <action title='Run'><b>Run</b></action> on the editor menu pane."
            ],
            "content": [
                {
                    "displayType": "tabbedEditor",
                    "editorList": [
                        {
                            "displayType": "tabbedEditor",
                            "fileName": "BankService.java",
                            "preload": [
                                "package io.openliberty.guides.retrytimeout.global.eBank.microservices;",
                                "",
                                "import javax.enterprise.context.ApplicationScoped;",
                                "import java.time.temporal.ChronoUnit;",
                                "",
                                "import org.eclipse.microprofile.faulttolerance.Retry;",
                                "import org.eclipse.microprofile.faulttolerance.Timeout;",
                                "import org.eclipse.microprofile.faulttolerance.exceptions.TimeoutException;",
                                "",
                                "@ApplicationScoped",
                                "public class BankService {",
                                "",
                                "    @Retry(retryOn=TimeoutException.class,",
                                "           maxRetries=10,",
                                "           maxDuration=4,",
                                "           durationUnit=ChronoUnit.SECONDS)",
                                "    @Timeout(2000)",
                                "    public Service showTransactions() throws Exception {",
                                "       Service transactions = new Transactions();",
                                "       transactions.getTransactions();",
                                "       return transactions;",
                                "   }", 
                                "}"
                            ],
                            "readonly": [
                                {
                                    "from": "1",
                                    "to": "12"
                                },
                                {
                                    "from": "17",
                                    "to": "23"
                                }
                            ],
                            "editorHeight": "468px",
                            "save": false 
                        }    
                    ]
                },
                {
                    "displayType": "pod"
                }
            ]
        },
        {
            "name": "AddJitterRetry",
            "title": "Adding jitter to the delay",
            "TOCIndent": 1,
            "description": [
                "The Retry policy also provides a way to add jitter to the delay.  Jitter causes a slight variation in the delay time applied between retries.  For example, a jitter of 200ms will randomly add between -200 and 200 ms to each retry delay interval.",
                "<ul><li><b>jitter:</b> A random variation applied to the <a href='#configuring-a-delay'>delay</a> interval between retries. The value must be greater than or equal to <code>0</code>. A value of <code>0</code> means that it is not set. The default is <code>200</code> units, as defined by the <code>jitterDelayUnit</code> parameter.",
                "<li><b>jitterDelayUnit:</b> The unit of time for the <code>jitter</code> parameter as described by <code>java.time.temporal.ChronoUnit</code>.  The default is ChronoUnit.MILLIS. <p style='margin-top: inherit;'>The <code>java.time.temporal.ChronoUnit</code> class defines a standard set of date period units, including <code>NANOS, MICROS, MILLIS, SECONDS, MINUTES,</code> and <code>HOURS</code>.",
                "</ul>",
                "Why would you want to add a jitter?  Suppose, for example, that multiple applications are making requests to your microservice causing it to become overloaded.  By adding a jitter to the delay time you allow the retry times of these requests to vary.  Therefore, the cluster of retry requests are spread out over time reducing the chance that the busy service continues to be overloaded."            ],
            "instruction": [
                "Add a jitter of 100ms to the delay in the <code>@Retry</code> annotation on lines 13-17, or click<br><action title='Add @Retry with jitter'>@Retry(retryOn=TimeoutException.class,\n       maxRetries=10,\n       maxDuration=4,\n       durationUnit=ChronoUnit.SECONDS,\n       delay=400, delayUnit=ChronoUnit.MILLIS,\n       jitter=100,\n       jitterDelayUnit=chronoUnit.MILLIS)</action>.<br> The delay between retries will now be spread out between 300 and 500 milliseconds.<br> Click <action title='Run'><b>Run</b></action> on the editor menu pane."
            ],
            "content": [
                {
                    "displayType": "tabbedEditor",
                    "editorList": [
                        {
                            "displayType": "tabbedEditor",
                            "fileName": "BankService.java",
                            "preload": [
                                "package io.openliberty.guides.retrytimeout.global.eBank.microservices;",
                                "",
                                "import javax.enterprise.context.ApplicationScoped;",
                                "import java.time.temporal.ChronoUnit;",
                                "",
                                "import org.eclipse.microprofile.faulttolerance.Retry;",
                                "import org.eclipse.microprofile.faulttolerance.Timeout;",
                                "import org.eclipse.microprofile.faulttolerance.exceptions.TimeoutException;",
                                "",
                                "@ApplicationScoped",
                                "public class BankService {",
                                "",
                                "    @Retry(retryOn=TimeoutException.class,",
                                "           maxRetries=10,",
                                "           maxDuration=4,",
                                "           durationUnit=ChronoUnit.SECONDS,",
                                "           delay=400, dealyUnit=ChronoUnit.MILLIS)",
                                "    @Timeout(2000)",
                                "    public Service showTransactions() throws Exception {",
                                "       Service transactions = new Transactions();",
                                "       transactions.getTransactions();",
                                "       return transactions;",
                                "   }", 
                                "}"
                            ],
                            "readonly": [
                                {
                                    "from": "1",
                                    "to": "12"
                                },
                                {
                                    "from": "18",
                                    "to": "24"
                                }
                            ],
                            "editorHeight": "468px",
                            "save": false 
                        }    
                    ]
                },
                {
                    "displayType": "pod"
                }
            ]
        },
        {
            "name": "AddAbortOnRetry",
            "title": "Specifying an abort failure condition",
            "TOCIndent": 1,
            "description": [
                "You may decide that in some failure conditions all retry attempts should be aborted and instead the service should fail immediately. This prevents the service from retrying for conditions that you know the service cannot recover from, like a <code>FileNotFoundException</code>. The Retry policy also has a parameter to identify these exceptions.",
                "<ul><li><b>abortOn:</b>  Specifies an exception class that will stop retries and fail immediately. You can identify more than one exception as an array of values.  For example,<br><span style='margin-left: 10px;'><code>@Retry(abortOn={RuntimeException.class, FileNotFoundException.class})</code>.</span><br>There is no default value.",
                "</ul>"
            ],
            "instruction": [
                "Add a condition to the <code>@Retry</code> annotation beginning on line 14 to stop all retry attempts when a <code>FileNotFoundException</code> occurs, or click<br> <action title='Add @Retry with the abortOn parameter'>@Retry(retryOn=TimeoutException.class,\n       maxRetries=10,\n       maxDuration=4,\n       durationUnit=ChronoUnit.SECONDS,\n       delay=400, delayUnit=ChronoUnit.MILLIS,\n       jitter=100,\n       jitterDelayUnit=ChronoUnit.MILLIS,\n       abortOn=FileNotFoundException.class)</action>.<br> This Retry policy will allow all timeouts from our service to be retried up to 10 times within 4 seconds of the original timeout failure, with a delay of 300 to 500 ms between retry attempts, but will halt all retry attempts and immediately return if a <code>FileNotFoundException</code> occurs.<br>Click <action title='Run'><b>Run</b></action> on the editor menu pane."
            ],
            "content": [
                {
                    "displayType": "tabbedEditor",
                    "editorList": [
                        {
                            "displayType": "tabbedEditor",
                            "fileName": "BankService.java",
                            "preload": [
                                "package io.openliberty.guides.retrytimeout.global.eBank.microservices;",
                                "",
                                "import javax.enterprise.context.ApplicationScoped;",
                                "import java.io.FileNotFoundException",
                                "import java.time.temporal.ChronoUnit;",
                                "",
                                "import org.eclipse.microprofile.faulttolerance.Retry;",
                                "import org.eclipse.microprofile.faulttolerance.Timeout;",
                                "import org.eclipse.microprofile.faulttolerance.exceptions.TimeoutException;",
                                "",
                                "@ApplicationScoped",
                                "public class BankService {",
                                "",
                                "    @Retry(retryOn=TimeoutException.class,",
                                "           maxRetries=10,",
                                "           maxDuration=4,",
                                "           durationUnit=ChronoUnit.SECONDS,",
                                "           delay=400, dealyUnit=ChronoUnit.MILLIS,",
                                "           jitter=100,",
                                "           jitterDelayUnit=ChronoUnite.MILLIS)",
                                "    @Timeout(2000)",
                                "    public Service showTransactions() throws Exception {",
                                "       Service transactions = new Transactions();",
                                "       transactions.getTransactions();",
                                "       return transactions;",
                                "   }", 
                                "}"
                            ],
                            "readonly": [
                                {
                                    "from": "1",
                                    "to": "13"
                                },
                                {
                                    "from": "21",
                                    "to": "27"
                                }
                            ],
                            "editorHeight": "468px",
                            "save": false 
                        }    
                    ]
                },
                {
                    "displayType": "pod"
                }
            ]
        },
        {
            "name": "WhatNext",
            "title": "Great work!  You're done!",
            "description": [
            ]
        }
    ]
}
