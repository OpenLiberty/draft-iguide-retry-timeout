{
    "name": "RetryTimeout",
    "title": "Retry and Timeout",
    "description": "Learn how to use the MicroProfile Retry and Timeout policies.",
    "duration": "20 minutes",
    "audience": "developer",
    "repo": "https://github.com/OpenLiberty/draft-iguide-retry-timeout",
    "steps": [
        {
            "name": "Intro",
            "title": "What you'll learn",
            "guide_duration" : "20 minutes",
            "description": [
                "Explore how to use MicroProfile Retry and Timeout policies to make your microservice more fault-tolerant.",
                "You'll..."
            ],
            "sections" : [
                {
                    "name": "backgroundConcepts",
                    "title": "Background concepts",
                    "description": [
                    ]
                }
            ]
        },
        {
            "name": "AddLibertyMPFaultTolerance",
            "title": "Enabling MicroProfile Fault Tolerance",
            "description": [
                "Microprofile Fault Tolerance allows microservices to handle unavailable services. It uses different policies to guide the execution and result of some logic. The MicroProfile Fault Tolerance 1.0 feature provides an environment to support resilient microservices through patterns that include retry and timeout. Enable the MicroProfile Fault Tolerance 1.0 feature in the <code>server.xml</code> file of the Liberty server."
            ],
            "instruction": [
              "Add the following element declaration inside the featureManager element of the <code>server.xml</code> file, or click <action title='Enable MicroProfile Fault Tolerance' onclick=\"retryTimeoutCallback.addMicroProfileFaultToleranceFeatureButton(event)\"><b>&lt;feature>mpFaultTolerance-1.0&lt;/feature&gt;</b></action>. Then, click <action title='Save' onclick=\"retryTimeoutCallback.saveServerXMLButton(event)\"><b>Save</b></action> on the editor menu pane."
            ],
            "content": [
                {
                    "displayType": "tabbedEditor",
                    "editorList": [
                        {
                            "displayType": "fileEditor",
                            "fileName": "server.xml",
                            "preload": [
                                "<?xml version=\"1.0\"?>",
                                "<server description=\"Sample Liberty server\">",
                                "   <featureManager>",
                                "      <feature>cdi-1.2</feature>",
                                "   </featureManager>",
                                "   <httpEndpoint host=\"*\" id=\"defaultHttpEndpoint\" httpsPort=\"${default.https.port}\" httpPort=\"{default.http.port}\"/>",
                                "</server>"
                            ],
                            "save": true,
                            "readonly": [
                                {
                                    "from": "1",
                                    "to": "3"
                                },
                                {
                                    "from": "5",
                                    "to": "7"
                                }
                            ],
                            "callback": "(function test(editor) {retryTimeoutCallback.listenToEditorForFeatureInServerXML(editor); })"
                        }
                    ]
                }
            ]
        },
        {
            "name": "BankScenario",
            "title": "Example: bank scenario",
            "description": [
                "Imagine that you're developing a transaction history microservice for a bank to allow clients to check their online transaction history. The initial naive implementation of the microservice allows customer to click on history transaction. When the transaction history request can not be retrieved via the back-end database that store the transactions, the page is loading for an indefinite amount of time. As you progress through the guide, you will see how the transaction history request being handle using <code>@Timeout</code> and <code>@Retry</code> annotations."
            ],
            "sections": [
                {
                    "name": "TransactionHistory",
                    "title": "Request a transaction history",
                    "description": [
                        "Begin by requesting an online transaction history."
                    ],
                    "instruction": [
                        "Click <action title='Customer requests a transaction history' onclick=\"retryTimeoutCallback.clickTransaction(event, 'TransactionHistory', 1)\"><b>Customer requests transaction history</b></action> to retrieve a transaction history. Since the back-end database is down, the page is loading indefinitely trying to retrieve the transaction history."
                    ],
                    "content":[
                        {
                            "displayType":"pod",
                            "content": "/guides/draft-iguide-retry-timeout/html/transaction-history-example-scenario.html"
                        }
                    ]
                }
            ]
        },
        {
            "name": "WhatNext",
            "title": "Great work!  You're done!",
            "description": [
            ]
        }
    ]
}
